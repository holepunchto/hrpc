module.exports = function generateCode (hyperapi, { esm = false }) {
  let str = ''
  str += '// This file is autogenerated by the hyperdispatch compiler\n'
  str += '/* eslint-disable camelcase */\n'
  str += '\n'

  if (esm) {
    str += 'import { c, RPC } from \'hyperdispatch/runtime\'\n'
    str += 'import { getEncoding } from \'./messages.js\'\n'
  } else {
    str += 'const { c, RPC } = require(\'hyperdispatch/runtime\')\n'
    str += 'const { getEncoding } = require(\'./messages.js\')\n'
  }
  str += '\n'
  str += 'const methods = new Map([\n'
  hyperapi.handlers.forEach((e, i) => {
    if (i < hyperapi.handlers.length - 1) {
      str += `  ['${e.name}', ${i}],\n`
      str += `  [${i}, '${e.name}'],\n`
    } else {
      str += `  ['${e.name}', ${i}],\n`
      str += `  [${i}, '${e.name}']\n`
    }
  })
  str += '])\n'
  str += '\n'

  str += 'class Hyperapi {\n'
  str += '  constructor (stream) {\n'
  str += '    this._stream = stream\n'
  str += '    this._handlers = []\n'
  str += '    this._requestEncodings = new Map([\n'
  hyperapi.handlers.forEach((e, i) => {
    if (i < hyperapi.handlers.length - 1) {
      str += `      ['${e.name}', getEncoding('${e.request.name}')],\n`
    } else {
      str += `      ['${e.name}', getEncoding('${e.request.name}')]\n`
    }
  })
  str += '    ])\n'
  str += '    this._responseEncodings = new Map([\n'
  hyperapi.handlers.forEach((e, i) => {
    if (i < hyperapi.handlers.length - 1) {
      str += `      ['${e.name}', getEncoding('${e.response.name}')],\n`
    } else {
      str += `      ['${e.name}', getEncoding('${e.response.name}')]\n`
    }
  })
  str += '    ])\n'
  str += '    this._rpc = new RPC(stream, (req) => {\n'
  str += '      const command = methods.get(req.command)\n'
  str += '      if (this._requestIsStream(req.command)) {\n'
  str += '        throw Error(\'TODO\')\n'
  str += '      } else {\n'
  str += '        const request = c.decode(this._requestEncodings.get(command), req.data)\n'
  str += '        const encoding = this._responseEncodings.get(command)\n'
  str += '        if (this._responseIsStream(req.command)) {\n'
  str += '          throw Error(\'TODO\')\n'
  str += '        } else {\n'
  str += '          const response = this._handlers[command](request)\n'
  str += '          req.reply(c.encode(encoding, response))\n'
  str += '        }\n'
  str += '      }\n'
  str += '    })\n'
  str += '  }\n'
  str += '\n'
  hyperapi.handlers.forEach((e) => {
    str += `  async ${convertToCamelCase(e.name)} (args) {\n`
    str += `    const encoding = this._requestEncodings.get('${e.name}')\n`
    str += '    const encoded = c.encode(encoding, args)\n'
    str += `    const request = this._rpc.request(methods.get('${e.name}'))\n`
    str += `    if (this._requestIsStream('${e.name}')) {\n`
    str += '      throw Error(\'TODO\')\n'
    str += '    } else {\n'
    str += '      request.send(encoded)\n'
    str += '    }\n'
    str += `    if (this._responseIsStream('${e.name}')) {\n`
    str += '      throw Error(\'TODO\')\n'
    str += '    } else {\n'
    str += `      return c.decode(this._responseEncodings.get('${e.name}'), await request.reply())\n`
    str += '    }\n'
    str += '  }\n'
    str += '\n'
  })
  hyperapi.handlers.forEach((e) => {
    str += `  async ${convertToCamelCase(e.name, { prefix: 'on', capitalizeFirst: true })} (responseFn) {\n`
    str += `    this._handlers['${e.name}'] = responseFn\n`
    str += '  }\n'
    str += '\n'
  })
  str += '  _requestIsStream (command) {\n'
  str += '    return [\n'
  hyperapi.handlers.filter(e => e.request.stream === true).forEach((e, i) => {
    if (i < hyperapi.handlers.length - 1) {
      str += `      ${e.name},\n`
    } else {
      str += `      ${e.name}\n`
    }
  })
  str += '    ].includes(command)\n'
  str += '  }\n'
  str += '\n'
  str += '  responseIsStream (command) {\n'
  str += '    return [\n'
  hyperapi.handlers.filter(e => e.response.stream === true).forEach((e, i) => {
    if (i < hyperapi.handlers.length - 1) {
      str += `      ${e.name},\n`
    } else {
      str += `      ${e.name}\n`
    }
  })
  str += '    ].includes(command)\n'
  str += '  }\n'
  str += '}\n\n'

  if (esm) {
    str += 'export default Hyperapi\n'
  } else {
    str += 'module.exports = Hyperapi\n'
  }

  return str
}

function convertToCamelCase (input, opts = { prefix: '', capitalizeFirst: false }) {
  if (input.startsWith('@')) {
    input = input.slice(1)
  }

  const parts = input.split(/[/-]/)

  const camelCased = parts.map((part, index) => {
    if (index === 0 && !opts.capitalizeFirst) return part
    return part.charAt(0).toUpperCase() + part.slice(1)
  })

  return opts.prefix + camelCased.join('')
}
